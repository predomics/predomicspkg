% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sota.rf.R
\name{sota.rf}
\alias{sota.rf}
\title{sota.rf}
\usage{
sota.rf(
  sparsity = c(1:30),
  objective = "auc",
  max.nb.features = 1000,
  intercept = "NULL",
  language = "rf",
  evalToFit = "auc_",
  k_penalty = 0,
  ntree = 500,
  mtry = NULL,
  replace = TRUE,
  classwt = NULL,
  sampsize = NULL,
  nodesize = NULL,
  maxnodes = NULL,
  importance = FALSE,
  localImp = FALSE,
  nPerm = 1,
  norm.votes = TRUE,
  do.trace = FALSE,
  keep.forest = TRUE,
  corr.bias = FALSE,
  keep.inbag = FALSE,
  popSaveFile = "NULL",
  seed = "NULL",
  nCores = 4,
  verbose = TRUE,
  plot = FALSE,
  warnings = FALSE,
  debug = FALSE,
  print_ind_method = "short",
  experiment.id = NULL,
  experiment.description = NULL,
  experiment.save = "nothing"
)
}
\arguments{
\item{language}{is the language that is used by the different algorithms {bin, bininter, ter, terinter, ratio}, (default:"sota")}

\item{sparsity:}{number of features in a given model. This is a vector with multiple lengths.}

\item{objective:}{prediction mode (default: auc)}

\item{max.nb.features:}{create the glmnet object using only the top most significant features (default:1000)}

\item{intercept:}{(Interceot for the a given model) (default:NULL)}

\item{evalToFit:}{Which model property will be used to select the best model among different k_sparsities (default: auc_)}

\item{k_penalty:}{Penalization of the fit by the k_sparsity (default: 0)}

\item{ntree:}{??}

\item{mtry:}{Number of variables randomly sampled as candidates at each split. Note that the default values are different for classification (sqrt(p) where p is number of variables in x) and regression (p/3)}

\item{replace:}{Should sampling of cases be done with or without replacement?}

\item{classwt:}{Priors of the classes. Need not add up to one. Ignored for regression.}

\item{sampsize:}{Size(s) of sample to draw. For classification, if sampsize is a vector of the length the number of strata, then sampling is stratified by strata, and the elements of sampsize indicate the numbers to be drawn from the strata.}

\item{nodesize:}{Minimum size of terminal nodes. Setting this number larger causes smaller trees to be grown (and thus take less time). Note that the default values are different for classification (1) and regression (5).}

\item{maxnodes:}{Maximum number of terminal nodes trees in the forest can have. If not given, trees are grown to the maximum possible (subject to limits by nodesize). If set larger than maximum possible, a warning is issued.}

\item{importance:}{??}

\item{localImp:}{??}

\item{nPerm:}{??}

\item{norm.votes:}{(??)}

\item{do.trace:}{??}

\item{keep.forest:}{??}

\item{cor.bias:}{??}

\item{keep.inbag:}{??}

\item{popSaveFile:}{(??)}

\item{seed:}{the seed to be used for reproductibility. If seed=NULL than it is not taken into account (default:NULL).}

\item{nCores:}{the number of CPUs to run the programm in parallel}

\item{plot:}{Plot graphics indicating the evolution of the simulation (default:FALSE)}

\item{verbose:}{print out information on the progress of the algorithm (default:TRUE)}

\item{warnings:}{Print out warnings when runnig (default:FALSE).}

\item{debug:}{print out information on the progress of the algorithm (default:FALSE)}

\item{print_ind_method:}{One of c("short","graphical") indicates how to print a model and subsequently a population during the run (default:"short").}

\item{experiment.id:}{The id of the experiment that is to be used in the plots and comparitive analyses (default is the learner's name, when not specified)}

\item{experiment.description:}{A longer description of the experiment. This is important when many experiments are run and can also be printed in by the printExperiment function.}

\item{experiment.save:}{Data from an experiment can be saved with different levels of completness, with options to be selected from c("nothing", "minimal", "full"), default is "minimal"}
}
\value{
an object containing a list of parameters for this classifier
}
\description{
sota.svm is a wrapper that executes svm using the same framework as for the predomics package.
}
\details{
sota.rf: launching Random Forest classifier
}
